--DAY 4:

---Find Student_Name and Program_NAME
SELECT s.STUDENT_NAME , p.PROGRAM_NAME
FROM PROGRAMS p
INNER JOIN STUDENTS s ON p.PROGRAM_ID = s.PROGRAM_ID;

---Find Student_Name and Program_NAME
--- including the students without program
SELECT s.STUDENT_NAME , p.PROGRAM_NAME
FROM STUDENTS s
LEFT OUTER JOIN PROGRAMS p 
ON p.PROGRAM_ID = s.PROGRAM_ID;

--What if the joining order was different PROGRAMS join STUDENTS

SELECT s.STUDENT_NAME , p.PROGRAM_NAME
FROM PROGRAMS p
RIGHT OUTER JOIN STUDENTS s 
ON s.PROGRAM_ID = p.PROGRAM_ID;



--Find Student_Name and Program_NAME
--including the programs without students
SELECT s.STUDENT_NAME , p.PROGRAM_NAME
FROM STUDENTS s --Left Table
RIGHT OUTER JOIN PROGRAMS p --Right Table
ON p.PROGRAM_ID = s.PROGRAM_ID;
                                    
                                    
SELECT p.PROGRAM_NAME , s.STUDENT_NAME
FROM PROGRAMS p -- Left Table
LEFT OUTER JOIN STUDENTS s --Right Table
ON p.PROGRAM_ID = s.PROGRAM_ID;


      
                                
--Find Student_Name and Program_NAME
----including the programs without students
--- including the students without program
SELECT s.STUDENT_NAME , p.PROGRAM_NAME
FROM STUDENTS s
FULL OUTER JOIN PROGRAMS p
ON s.PROGRAM_ID = p.PROGRAM_ID;

--1. Find COUNTRY NAME and REGION NAME from COUNTRIES and REGION table
SELECT c.COUNTRY_NAME , r.REGION_NAME
FROM COUNTRIES c
INNER JOIN REGIONS r 
ON c.REGION_ID = r.REGION_ID;

--2. Find FIRST_NAME and JOB_TITILE from JOBS and EMPLOYEES tables
--Relationship between Employees and Jobs tables ---> JOB_ID column
SELECT e.FIRST_NAME , j.JOB_TITLE
FROM EMPLOYEES e
INNER JOIN JOBS j 
ON e.JOB_ID = j.JOB_ID;

---All employees have a job_id and job_title

--3. Find DEPARTMENT_NAME and CITY
SELECT d.DEPARTMENT_NAME , l.CITY
FROM DEPARTMENTS d
INNER JOIN LOCATIONS l
ON d.LOCATION_ID = l.LOCATION_ID;
--- in INNER JOIN and FULL OUTER doesn't care which table comes first
SELECT d.DEPARTMENT_NAME , l.CITY
FROM LOCATIONS l
INNER JOIN DEPARTMENTS d
ON d.LOCATION_ID = l.LOCATION_ID;



---Find CITY , COUNTRY_NAME of that city, REGION_NAME of that country
--- CITY - location
--- COUNTRY_NAME -- Countries table   country_id is used to relate with locations table
---REGION_NAME --- Regions table           region_id is used to relate with countries table

SELECT   l.CITY ,   c.COUNTRY_NAME ,   r.REGION_NAME
FROM LOCATIONS l
INNER JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID
INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID;

---Find Employee First_name , Job_title , Department_Name
-- FIRST_NAME - Employees
-- JOB_TITLE -- JOBS, it has relationship with EMPLOYEES table using JOB_ID
-- DEPARTMENT_NAME - DEPARTMENTS , it has relationship with EMPLOYEES table using DEPARTMENT_ID

SELECT e.FIRST_NAME ,   j.JOB_TITLE ,   d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

---Find Employee First_name , Job_title , Department_Name, City
-- FIRST_NAME - Employees
-- JOB_TITLE -- JOBS, it has relationship with EMPLOYEES table using JOB_ID
-- DEPARTMENT_NAME - DEPARTMENTS , it has relationship with EMPLOYEES table using DEPARTMENT_ID
--CITY -- it has relationship with DEPARTMENTS table using location_id

SELECT e.FIRST_NAME ,   j.JOB_TITLE ,    d.DEPARTMENT_NAME,    l.CITY
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID;

---Find Employee First_name , Job_title , Department_Name, City, COUNTRY_NAME
-- FIRST_NAME - Employees
-- JOB_TITLE -- JOBS, it has relationship with EMPLOYEES table using JOB_ID
-- DEPARTMENT_NAME - DEPARTMENTS , it has relationship with EMPLOYEES table using DEPARTMENT_ID
--CITY -- LOCATIONS it has relationship with DEPARTMENTS table using location_id
--COUNTRY_NAME - COUNTRIES it has relationship with LOCATIONS table using Country_ID

SELECT e.FIRST_NAME ,   j.JOB_TITLE ,   d.DEPARTMENT_NAME,   l.CITY,   c.COUNTRY_NAME
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
INNER JOIN COUNTRIES c ON c.COUNTRY_ID = l.COUNTRY_ID;

---Find Employee First_name , Job_title , Department_Name, City, COUNTRY_NAME, REGION_NAME
-- FIRST_NAME - Employees
-- JOB_TITLE -- JOBS, it has relationship with EMPLOYEES table using JOB_ID
-- DEPARTMENT_NAME - DEPARTMENTS , it has relationship with EMPLOYEES table using DEPARTMENT_ID
--CITY -- LOCATIONS it has relationship with DEPARTMENTS table using location_id
--COUNTRY_NAME - COUNTRIES it has relationship with LOCATIONS table using Country_ID
---REGION_NAME - REGIONS it has relationship with COUNTRIES table using REGION_ID

SELECT e.FIRST_NAME ,   j.JOB_TITLE ,   d.DEPARTMENT_NAME,   l.CITY,   c.COUNTRY_NAME  ,  r.REGION_NAME
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
INNER JOIN COUNTRIES c ON c.COUNTRY_ID = l.COUNTRY_ID
INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID;

--Continue from above, filter the result to only display the rows that REGION_NAME is EUROPE
SELECT e.FIRST_NAME ,   j.JOB_TITLE ,   d.DEPARTMENT_NAME,   l.CITY,   c.COUNTRY_NAME  ,  r.REGION_NAME
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
INNER JOIN COUNTRIES c ON c.COUNTRY_ID = l.COUNTRY_ID
INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID
WHERE r.REGION_NAME = 'Europe';

---FROM LOCATIONS TABLE, FIND UNIQUE COUNTRY ID
SELECT DISTINCT COUNTRY_ID
FROM LOCATIONS;

--- Find Country_ID and COUNT of LOCATION in that country using Locations table
SELECT COUNTRY_ID , COUNT(*)
FROM LOCATIONS
GROUP BY COUNTRY_ID;--14 RESULTS

-- FROM DEPARTMENTS TABLE , FIND UNIQUE LOCATION_ID
SELECT DISTINCT LOCATION_ID
FROM DEPARTMENTS; -- 7 RESULTS


--27 DEPARTMENTS ARE LOCATED IN 7 DIFFERENT LOCATIONS
-- THIS 7 DIFFERENT LOCATIONS ARE IN 4 COUNTRIES

-- IN COUNTRIES TABLE THERE ARE 25 COUNTRIES
--BUT IN ONLY 14 OF THOSE COUNTRIES, THERE ARE DEPARTMENT LOCATIONS
--IN A NUTSHELL, WE DONT HAVE ANY DEPARTMENT IN 11 COUNTRIES AT ALL

--FIND DEPARTMENT_NAME , LOCATION_ID , COUNTRY_NAME
--INCLUDING THOSE COUNTRIES WITH NO DEPARTMENT

SELECT d.DEPARTMENT_NAME , l.LOCATION_ID, c. COUNTRY_NAME
FROM DEPARTMENTS d
-- RETURN ALL MATCHING LOCATION FOR DEPARTMENTS + ANY LOCATION THAT DOES NOT MATCH DEPARTMENT LOCATION
RIGHT JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
--RETURN ALL MATCHING COUNTRIES FOR LOCATIONS + ANY COUNTRY THAT DOES NOT MATCH ANY LOCATION
RIGHT OUTER JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID;

-- Find all Department_name , LOCATION_ID and Country_Id using Departments and Locations table
--including those locations with no departments at all

SELECT  d.DEPARTMENT_NAME ,  l.LOCATION_ID  ,  l.COUNTRY_ID
FROM DEPARTMENTS d
RIGHT OUTER JOIN LOCATIONS l ON l.LOCATION_ID = d.LOCATION_ID
ORDER BY 1;---WE ARE ORDERING BY 1ST COLUMN SO ALL NULL SHOW IN ONE PLACE

-- Find all LOCATION_ID and Country_NAME using COUNTRIES and Locations table
--including those COUNTRIES with no LOCATIONS at all

SELECT l.LOCATION_ID   ,   c.COUNTRY_NAME
FROM LOCATIONS l
RIGHT OUTER JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID;

--WHAT IF
SELECT    c.COUNTRY_NAME    ,   l.LOCATION_ID
FROM COUNTRIES c
LEFT JOIN LOCATIONS l ON c.COUNTRY_ID = l.COUNTRY_ID;


--- SET OPERATORS IN SQL :  UNION , UNION ALL,  MINUS,  INTERSECT

SELECT * FROM FIRST_TABLE; -- 10 ROWS

SELECT * FROM SECOND_TABLE; -- 9 ROWS

--THERE ARE 4 DUPLICATE ROWS IN THESE 2 TABLES

-- UNION ALL --- COMBINES THE RESULT OF 2 QUERY AS IS

SELECT * FROM FIRST_TABLE
UNION ALL
SELECT * FROM SECOND_TABLE;  --- 19 ROWS

-- UNION - COMBINES THE RESULT OF 2 QUERY AS IS, REMOVE DUPLICATE ROWS, SORT BY FIRST COLUMN
SELECT * FROM FIRST_TABLE
UNION
SELECT * FROM SECOND_TABLE; -- 15 ROWS

--MINUS --- Remove the FIRST TABLE's any rows that also show up in SECOND TABLE
-- it's almost like removing common rows from first table
SELECT * FROM FIRST_TABLE
MINUS
SELECT * FROM SECOND_TABLE;--NO NO LIST


SELECT * FROM SECOND_TABLE
MINUS
SELECT * FROM FIRST_TABLE; -- NO NO LIST

--INTERSECT -- ONLY RETURN COMMON ROWS IN BOTH TABLE
SELECT * FROM SECOND_TABLE
INTERSECT
SELECT * FROM FIRST_TABLE; 


-- list 1 : Milk, Egg, Bread, Juice, Water
-- list 2 : Cookie , Water, Egg, Meat

-- UNION ALL ---> Milk, Egg, Bread, Juice, Water, Cookie , Water, Egg, Meat
-- UNION        ---> Milk, Egg, Bread, Juice, Water, Cookie, Meat

-- MINUS
-- HERE IS YOUR list 2  NO-NO-LIST ! DO NOT BUT ANYTHING THAT SHOW UP IN LIST 2

--- LIST1 MINUS LIST2 --------->>>  Milk, Bread, Juice


-- LIST 2 MINUS LIST 1 ---->>> Cookie , Meat

--- INTERSECT :  GET ONLY THOSE ITEMS IF THEY SHOW UP IN BOTH LIST, COMMON PART ONLY

-- LIST1 INTERSECT LIST 2 --->>> WATER , EGG


-- 1.Find out all FIRST_NAME in Excecutive Department
-- ONLY DISPLAY THOSE RESULTS IF DEPARTMENT NAME IS EXECUTIVE
SELECT e.FIRST_NAME , d.DEPARTMENT_NAME 
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE d.DEPARTMENT_NAME = 'Executive';

--1.1 Find out all the first_name and department_name
--only display the result if the department_name are: Purchasing , Human Resources , Shipping, Sales
--and if the employee has COMMISSION_PC value
SELECT e.FIRST_NAME , d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
WHERE d.DEPARTMENT_NAME IN ('Purchasing' , 'Human Resources' , 'Shipping' , 'Sales')
AND e.COMMISSION_PCT IS NOT NULL;

-- 2. Find out Department name and count of Employees in EACH Department
SELECT d.DEPARTMENT_NAME , COUNT(e.FIRST_NAME)
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME;

--3. Build on top of above query
--only display those results if the employee count is more than 10

SELECT d.DEPARTMENT_NAME , COUNT(e.FIRST_NAME)
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME
HAVING COUNT(e.FIRST_NAME) > 10;

--4. Build on top query2, only display the Department_Name that starts with A
SELECT d.DEPARTMENT_NAME , COUNT(e.FIRST_NAME)
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
--WHERE d.DEPARTMENT_NAME LIKE 'A%' -- ALSO POSSIBLE
GROUP BY d.DEPARTMENT_NAME
HAVING d.DEPARTMENT_NAME LIKE 'A%';

--5. build on top of above query 4 display DEPARTMENT_NAME in UPPERCASE

SELECT UPPER(d.DEPARTMENT_NAME) , COUNT(e.FIRST_NAME)
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
WHERE d.DEPARTMENT_NAME LIKE 'A%' -- ALSO POSSIBLE
GROUP BY d.DEPARTMENT_NAME;

--6. Find the count of Employees for each job_title
SELECT j.JOB_TITLE , COUNT(e.FIRST_NAME)
FROM EMPLOYEES e
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
GROUP BY j.JOB_TITLE;

--7. find out first name , city
SELECT e.FIRST_NAME , l.CITY
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID;

--8. find out the count of employees
SELECT  l.CITY , COUNT(e.FIRST_NAME)
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
GROUP BY l.CITY;